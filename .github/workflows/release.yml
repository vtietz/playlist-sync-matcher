name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  build-cli:
    name: Build CLI - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: psm-cli.exe
            asset_name: psm-cli-windows-amd64.exe
          - os: ubuntu-latest
            artifact_name: psm-cli
            asset_name: psm-cli-linux-amd64
          - os: macos-latest
            artifact_name: psm-cli
            asset_name: psm-cli-macos-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build CLI executable with PyInstaller
        run: pyinstaller psm-cli.spec

      - name: Test CLI executable (smoke test)
        run: dist/${{ matrix.artifact_name }} --version
        shell: bash

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

  build-gui:
    name: Build GUI - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: psm-gui.exe
            asset_name: psm-gui-windows-amd64.exe
          - os: ubuntu-latest
            artifact_name: psm-gui
            asset_name: psm-gui-linux-amd64
          - os: macos-latest
            artifact_name: psm-gui
            asset_name: psm-gui-macos-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build GUI executable with PyInstaller
        run: pyinstaller psm-gui.spec

      - name: Test GUI executable (smoke test - check file exists)
        run: |
          if [ ! -f "dist/${{ matrix.artifact_name }}" ]; then
            echo "GUI executable not found!"
            exit 1
          fi
          echo "GUI executable built successfully"
        shell: bash

      - name: Upload GUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: [build-cli, build-gui]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets (unique names)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release-assets
          shopt -s nullglob
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              base="$(basename "$dir")"
              for f in "$dir"/*; do
                # Copy each artifact file to a flattened folder using the artifact name as the file name
                cp "$f" "release-assets/$base"
              done
            fi
          done

      - name: Remove existing assets (cleanup)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME}"
          shopt -s nullglob
          for f in release-assets/*; do
            [ -e "$f" ] || continue
            asset="$(basename "$f")"
            echo "Deleting existing asset if present: $asset"
            gh release delete-asset "$tag" "$asset" -y || true
          done
          # Also clean up any previously uploaded raw artifact filenames (e.g., psm-cli, psm-cli.exe, psm-gui, psm-gui.exe)
          for dir in artifacts/*; do
            [ -d "$dir" ] || continue
            for f in "$dir"/*; do
              raw_asset="$(basename "$f")"
              echo "Deleting possibly lingering raw asset: $raw_asset"
              gh release delete-asset "$tag" "$raw_asset" -y || true
            done
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: release-assets/*
          draft: false
          prerelease: false
          make_latest: true
          body_path: ${{ (hashFiles(format('docs/releasenotes/{0}.md', github.ref_name)) != '' && format('docs/releasenotes/{0}.md', github.ref_name)) || '' }}
          generate_release_notes: ${{ hashFiles(format('docs/releasenotes/{0}.md', github.ref_name)) == '' }}
