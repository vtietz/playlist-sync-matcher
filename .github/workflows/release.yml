name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  build-cli:
    name: Build CLI - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: psm-cli.exe
            asset_name: playlist-sync-matcher-cli-${{ github.ref_name }}-Win64.exe
          - os: ubuntu-latest
            artifact_name: psm-cli
            asset_name: playlist-sync-matcher-cli-${{ github.ref_name }}-Linux64
          - os: macos-latest
            artifact_name: psm-cli
            asset_name: playlist-sync-matcher-cli-${{ github.ref_name }}-macOS-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.3.0

      - name: Build CLI executable with PyInstaller
        run: pyinstaller psm-cli.spec

      - name: Test CLI executable (smoke test)
        run: dist/${{ matrix.artifact_name }} --version
        shell: bash

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

  build-gui:
    name: Build GUI - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: psm-gui.exe
            asset_name: playlist-sync-matcher-gui-${{ github.ref_name }}-Win64.exe
          - os: ubuntu-latest
            artifact_name: psm-gui
            asset_name: playlist-sync-matcher-gui-${{ github.ref_name }}-Linux64
          - os: macos-latest
            artifact_name: psm-gui
            asset_name: playlist-sync-matcher-gui-${{ github.ref_name }}-macOS-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.3.0

      - name: Build GUI executable with PyInstaller
        run: pyinstaller psm-gui.spec

      - name: Test GUI executable (smoke test - check file exists)
        run: |
          if [ ! -f "dist/${{ matrix.artifact_name }}" ]; then
            echo "GUI executable not found!"
            exit 1
          fi
          echo "GUI executable built successfully"
        shell: bash

      - name: Upload GUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: [build-cli, build-gui]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect pre-release
        id: detect_prerelease
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "Release tag: ${TAG_NAME}"
          
          # Detect pre-release from tag name (rc, beta, alpha)
          if [[ "${TAG_NAME}" =~ -(rc|beta|alpha) ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "🔖 Pre-release detected from tag: ${TAG_NAME}"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "📦 Regular release: ${TAG_NAME}"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets (unique names)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release-assets bundle/windows bundle/linux bundle/macos

          # Create bundled archives containing both CLI and GUI per-OS
          # Windows zip bundle (playlist-sync-matcher-${tag}-Win64.zip)
          tag="${GITHUB_REF_NAME}"
          cli_win="playlist-sync-matcher-cli-${tag}-Win64.exe"
          gui_win="playlist-sync-matcher-gui-${tag}-Win64.exe"
          if [ -d "artifacts/${cli_win}" ] && [ -d "artifacts/${gui_win}" ]; then
            echo "Creating Windows bundle..."
            rm -rf bundle/windows/*
            cp "artifacts/${cli_win}/"* bundle/windows/psm-cli.exe
            cp "artifacts/${gui_win}/"* bundle/windows/psm-gui.exe
            (cd bundle/windows && zip -9 "../playlist-sync-matcher-${tag}-Win64.zip" psm-cli.exe psm-gui.exe)
            mv "bundle/playlist-sync-matcher-${tag}-Win64.zip" release-assets/
          fi

          # Linux tar.gz bundle (playlist-sync-matcher-${tag}-Linux64.tar.gz)
          cli_linux="playlist-sync-matcher-cli-${tag}-Linux64"
          gui_linux="playlist-sync-matcher-gui-${tag}-Linux64"
          if [ -d "artifacts/${cli_linux}" ] && [ -d "artifacts/${gui_linux}" ]; then
            echo "Creating Linux bundle..."
            rm -rf bundle/linux/*
            cp "artifacts/${cli_linux}/"* bundle/linux/psm-cli
            cp "artifacts/${gui_linux}/"* bundle/linux/psm-gui
            chmod +x bundle/linux/psm-cli bundle/linux/psm-gui || true
            tar -C bundle/linux -czf "bundle/playlist-sync-matcher-${tag}-Linux64.tar.gz" psm-cli psm-gui
            mv "bundle/playlist-sync-matcher-${tag}-Linux64.tar.gz" release-assets/
          fi

          # macOS tar.gz bundle (playlist-sync-matcher-${tag}-macOS-x64.tar.gz)
          cli_macos="playlist-sync-matcher-cli-${tag}-macOS-x64"
          gui_macos="playlist-sync-matcher-gui-${tag}-macOS-x64"
          if [ -d "artifacts/${cli_macos}" ] && [ -d "artifacts/${gui_macos}" ]; then
            echo "Creating macOS bundle..."
            rm -rf bundle/macos/*
            cp "artifacts/${cli_macos}/"* bundle/macos/psm-cli
            cp "artifacts/${gui_macos}/"* bundle/macos/psm-gui
            chmod +x bundle/macos/psm-cli bundle/macos/psm-gui || true
            tar -C bundle/macos -czf "bundle/playlist-sync-matcher-${tag}-macOS-x64.tar.gz" psm-cli psm-gui
            mv "bundle/playlist-sync-matcher-${tag}-macOS-x64.tar.gz" release-assets/
          fi

      - name: Generate release notes
        run: |
          tag="${GITHUB_REF_NAME}"
          NOTES_FILE="docs/releasenotes/${tag}.md"
          
          if [ -f "$NOTES_FILE" ]; then
            echo "✅ Using release notes from: $NOTES_FILE"
            cat "$NOTES_FILE" > release_notes.md
          else
            echo "⚠️  No release notes found at $NOTES_FILE"
            echo "Generating default release notes for tag: $tag"
            cat > release_notes.md << EOF
          # Release ${tag}

          ## Downloads

          ### Windows
          - **Bundle (CLI + GUI)**: \`playlist-sync-matcher-${tag}-Win64.zip\`

          ### Linux
          - **Bundle (CLI + GUI)**: \`playlist-sync-matcher-${tag}-Linux64.tar.gz\`

          ### macOS
          - **Bundle (CLI + GUI)**: \`playlist-sync-matcher-${tag}-macOS-x64.tar.gz\`

          ## Installation

          ### Windows
          1. Download \`playlist-sync-matcher-${tag}-Win64.zip\`
          2. Extract the zip file
          3. Run \`psm-gui.exe\` for the graphical interface or \`psm-cli.exe\` for command-line usage

          ### Linux
          \`\`\`bash
          # Download and extract
          tar -xzf playlist-sync-matcher-${tag}-Linux64.tar.gz

          # Make executables runnable
          chmod +x psm-cli psm-gui

          # Run GUI or CLI
          ./psm-gui  # Graphical interface
          ./psm-cli  # Command-line interface
          \`\`\`

          ### macOS
          \`\`\`bash
          # Download and extract
          tar -xzf playlist-sync-matcher-${tag}-macOS-x64.tar.gz

          # Make executables runnable
          chmod +x psm-cli psm-gui

          # Run GUI or CLI
          ./psm-gui  # Graphical interface
          ./psm-cli  # Command-line interface
          \`\`\`

          ## Notes

          This is an automated release. For detailed changelog, see the commit history.
          EOF
          fi

          echo "📝 Release Notes Preview:"
          head -n 20 release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: release-assets/*
          draft: false
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
          make_latest: ${{ env.IS_PRERELEASE == 'false' }}
          body_path: release_notes.md
